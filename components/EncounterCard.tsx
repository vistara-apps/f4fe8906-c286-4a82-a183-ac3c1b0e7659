'use client';

import { useState } from 'react';
import { Encounter } from '@/lib/types';
import { ContentCard } from './ContentCard';
import { 
  Calendar, 
  MapPin, 
  FileText, 
  Mic, 
  Share2, 
  Copy, 
  Download,
  ExternalLink
} from 'lucide-react';

interface EncounterCardProps {
  encounter: Encounter;
  onShare?: (encounter: Encounter) => void;
  onEdit?: (encounter: Encounter) => void;
}

export function EncounterCard({ encounter, onShare, onEdit }: EncounterCardProps) {
  const [isSharing, setIsSharing] = useState(false);
  const [copied, setCopied] = useState(false);

  const formatDate = (date: Date) => {
    return new Intl.DateTimeFormat('en-US', {
      year: 'numeric',
      month: 'short',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    }).format(new Date(date));
  };

  const generateShareableText = () => {
    const text = `
ENCOUNTER SUMMARY
================
Date: ${formatDate(encounter.timestamp)}
Location: ${encounter.location}
${encounter.scriptUsed ? `Script Used: ${encounter.scriptUsed}` : ''}
${encounter.recordingUrl ? 'Recording: Available' : 'Recording: None'}

Notes:
${encounter.notes || 'No additional notes'}

Generated by Know Your Rights Cards
${process.env.NEXT_PUBLIC_BASE_URL || 'http://localhost:3000'}
    `.trim();
    
    return text;
  };

  const handleCopyToClipboard = async () => {
    try {
      await navigator.clipboard.writeText(generateShareableText());
      setCopied(true);
      setTimeout(() => setCopied(false), 2000);
    } catch (error) {
      console.error('Failed to copy to clipboard:', error);
    }
  };

  const handleShare = async () => {
    setIsSharing(true);
    
    try {
      if (navigator.share) {
        await navigator.share({
          title: 'Encounter Summary',
          text: generateShareableText(),
          url: `${process.env.NEXT_PUBLIC_BASE_URL || 'http://localhost:3000'}/encounter/${encounter.encounterId}`
        });
      } else {
        // Fallback to clipboard
        await handleCopyToClipboard();
      }
      
      if (onShare) {
        onShare(encounter);
      }
    } catch (error) {
      console.error('Failed to share:', error);
    } finally {
      setIsSharing(false);
    }
  };

  const handleDownload = () => {
    const text = generateShareableText();
    const blob = new Blob([text], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `encounter-${encounter.encounterId}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  return (
    <ContentCard>
      <div className="space-y-4">
        {/* Header */}
        <div className="flex items-start justify-between">
          <div className="space-y-1">
            <h3 className="text-lg font-semibold text-white">Encounter Summary</h3>
            <div className="flex items-center space-x-2 text-sm text-gray-300">
              <Calendar className="w-4 h-4" />
              <span>{formatDate(encounter.timestamp)}</span>
            </div>
          </div>
          
          <div className="flex items-center space-x-2">
            <button
              onClick={handleCopyToClipboard}
              className="p-2 hover:bg-white hover:bg-opacity-10 rounded-lg transition-colors duration-200"
              title="Copy to clipboard"
            >
              <Copy className={`w-4 h-4 ${copied ? 'text-green-400' : 'text-gray-300'}`} />
            </button>
            
            <button
              onClick={handleDownload}
              className="p-2 hover:bg-white hover:bg-opacity-10 rounded-lg transition-colors duration-200"
              title="Download as text file"
            >
              <Download className="w-4 h-4 text-gray-300" />
            </button>
            
            <button
              onClick={handleShare}
              disabled={isSharing}
              className="p-2 hover:bg-white hover:bg-opacity-10 rounded-lg transition-colors duration-200 disabled:opacity-50"
              title="Share encounter"
            >
              <Share2 className="w-4 h-4 text-gray-300" />
            </button>
          </div>
        </div>

        {/* Details */}
        <div className="space-y-3">
          {/* Location */}
          <div className="flex items-center space-x-3">
            <MapPin className="w-5 h-5 text-blue-400 flex-shrink-0" />
            <div>
              <div className="text-sm text-gray-300">Location</div>
              <div className="text-white">{encounter.location}</div>
            </div>
          </div>

          {/* Script Used */}
          {encounter.scriptUsed && (
            <div className="flex items-center space-x-3">
              <FileText className="w-5 h-5 text-green-400 flex-shrink-0" />
              <div>
                <div className="text-sm text-gray-300">Script Used</div>
                <div className="text-white capitalize">{encounter.scriptUsed.replace('-', ' ')}</div>
              </div>
            </div>
          )}

          {/* Recording */}
          {encounter.recordingUrl && (
            <div className="flex items-center space-x-3">
              <Mic className="w-5 h-5 text-red-400 flex-shrink-0" />
              <div className="flex-1">
                <div className="text-sm text-gray-300">Recording</div>
                <div className="flex items-center space-x-2">
                  <span className="text-white">Available</span>
                  <button
                    onClick={() => window.open(encounter.recordingUrl, '_blank')}
                    className="text-blue-400 hover:text-blue-300 transition-colors duration-200"
                  >
                    <ExternalLink className="w-4 h-4" />
                  </button>
                </div>
              </div>
            </div>
          )}

          {/* Notes */}
          {encounter.notes && (
            <div className="bg-black bg-opacity-20 rounded-lg p-3">
              <div className="text-sm text-gray-300 mb-1">Notes</div>
              <div className="text-white text-sm">{encounter.notes}</div>
            </div>
          )}

          {/* Shared With */}
          {encounter.sharedWith.length > 0 && (
            <div className="bg-green-500 bg-opacity-20 rounded-lg p-3">
              <div className="text-sm text-green-300 mb-1">Shared With</div>
              <div className="text-green-200 text-sm">
                {encounter.sharedWith.join(', ')}
              </div>
            </div>
          )}
        </div>

        {/* Actions */}
        <div className="flex items-center justify-between pt-3 border-t border-white border-opacity-20">
          <div className="text-xs text-gray-400">
            ID: {encounter.encounterId}
          </div>
          
          <div className="flex items-center space-x-2">
            {onEdit && (
              <button
                onClick={() => onEdit(encounter)}
                className="text-sm text-blue-400 hover:text-blue-300 transition-colors duration-200"
              >
                Edit
              </button>
            )}
            
            <button
              onClick={handleShare}
              disabled={isSharing}
              className="btn-secondary text-sm py-2 px-4 disabled:opacity-50"
            >
              {isSharing ? 'Sharing...' : 'Share'}
            </button>
          </div>
        </div>

        {copied && (
          <div className="text-center text-sm text-green-400">
            Copied to clipboard!
          </div>
        )}
      </div>
    </ContentCard>
  );
}
